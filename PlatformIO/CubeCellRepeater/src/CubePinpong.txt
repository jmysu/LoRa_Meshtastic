/* Heltec Automation Ping Pong communication test example
 *
 * Function:
 * 1. Ping Pong communication in two CubeCell device.
 * 
 * Description:
 * 1. Only hardware layer communicate, no LoRaWAN protocol support;
 * 2. Download the same code into two CubeCell devices, then they will begin Ping Pong test each other;
 * 3. This example is for CubeCell hardware basic test.
 *
 * HelTec AutoMation, Chengdu, China
 * 成都惠利特自动化科技有限公司
 * www.heltec.org
 *
 * this project also realess in GitHub:
 * https://github.com/HelTecAutomation/ASR650x-Arduino
 * */
 
#include <Arduino.h>

#include "LoRaWan_APP.h"     

#if defined(cubecell_board_plus)
 #include <Wire.h> 
 #include "HT_SH1107Wire.h"

 SH1107Wire  oled(0x3c, 500000, SDA, SCL ,GEOMETRY_128_64,GPIO10); // addr, freq, sda, scl, resolution, rst
#endif

/*
 * set LoraWan_RGB to 1,the RGB active in loraWan
 * RGB red means sending;
 * RGB green means received done;
 */
#ifndef LoraWan_RGB
#define LoraWan_RGB 1
#endif

#define RF_FREQUENCY                                915000000 // Hz

#define TX_OUTPUT_POWER                             20        // dBm

#define LORA_BANDWIDTH                              0         // [0: 125 kHz,
                                                              //  1: 250 kHz,
                                                              //  2: 500 kHz,
                                                              //  3: Reserved]
#define LORA_SPREADING_FACTOR                       7         // [SF7..SF12]
#define LORA_CODINGRATE                             1         // [1: 4/5,
                                                              //  2: 4/6,
                                                              //  3: 4/7,
                                                              //  4: 4/8]
#define LORA_PREAMBLE_LENGTH                        8         // Same for Tx and Rx
#define LORA_SYMBOL_TIMEOUT                         0         // Symbols
#define LORA_FIX_LENGTH_PAYLOAD_ON                  false
#define LORA_IQ_INVERSION_ON                        false


#define RX_TIMEOUT_VALUE                            1000
#define BUFFER_SIZE                                 30 // Define the payload size here

char txpacket[BUFFER_SIZE];
char rxpacket[BUFFER_SIZE];

static RadioEvents_t RadioEvents;
void OnTxDone( void );
void OnTxTimeout( void );
void OnRxTimeout( void ); 
void OnRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr );

typedef enum
{
    LOWPOWER,
    RX,
    TX
}States_t;

int16_t txNumber;
States_t state;
bool sleepMode = false;
bool bTimeOut = false;
int16_t Rssi,rxSize;




void OnTxDone( void )
{
	Serial.print("TX done......");
	turnOnRGB(0,0);
	state=RX;
}

void OnTxTimeout( void )
{
    Radio.Sleep( );
    Serial.print("TX Timeout......");
    state=TX;
}

void OnRxTimeout( void )
{
    Radio.Sleep( );
    Serial.print("RX Timeout......");
    state=TX;
    bTimeOut=true;
} 

char sID[5];
char sRx[32];
void OnRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
    Rssi=rssi;
    rxSize=size;
    memcpy(rxpacket, payload, size );
    rxpacket[size]='\0';
    
    Radio.Sleep( );

    Serial.printf("\r\nreceived packet \"%s\" with Rssi %d  Snr %d, length %d\r\n",rxpacket,Rssi, snr, rxSize);
    Serial.println("wait to send next packet");
    #if defined(SH1107Wire_h)
        memset(sRx, 0, 32); 
    	sprintf(sRx,"%s:%s/%d",sID,rxpacket, Rssi);
        oled.setColor(BLACK);
        oled.fillRect(0,40,128,10);
        oled.setColor(WHITE);
        oled.drawString(0, 40, sRx);
        oled.display();
    #endif

    state=TX;
    bTimeOut = false;
}


void setup() {
    boardInitMcu( );
    Serial.begin(115200);
    delay(1000);
    uint64_t chipID=getID();
    Serial.printf("ChipID:%04X%08X\r\n",(uint32_t)(chipID>>32),(uint32_t)chipID);
    sID[4]=0;
    sprintf(sID, "%04X", (uint32_t)(chipID>>32));
    Serial.printf("ID:%s", sID);

    #if defined(SH1107Wire_h)
    // Initialising the UI will init the display too.
    oled.init();
    oled.setFont(ArialMT_Plain_10);
    oled.setColor(WHITE);
    oled.drawString(0, 0, "PingPong");
    oled.display();
    delay(2000);
    #endif

    txNumber=0;
    Rssi=0;

    RadioEvents.TxDone = OnTxDone;
    RadioEvents.TxTimeout = OnTxTimeout;
    RadioEvents.RxDone = OnRxDone;
    RadioEvents.RxTimeout = OnRxTimeout;
    
 

    Radio.Init( &RadioEvents );
    Radio.SetChannel( RF_FREQUENCY );
    Radio.SetTxConfig( MODEM_LORA, TX_OUTPUT_POWER, 0, LORA_BANDWIDTH,
                                   LORA_SPREADING_FACTOR, LORA_CODINGRATE,
                                   LORA_PREAMBLE_LENGTH, LORA_FIX_LENGTH_PAYLOAD_ON,
                                   true, 0, 0, LORA_IQ_INVERSION_ON, 3000 );

    Radio.SetRxConfig( MODEM_LORA, LORA_BANDWIDTH, LORA_SPREADING_FACTOR,
                                   LORA_CODINGRATE, 0, LORA_PREAMBLE_LENGTH,
                                   LORA_SYMBOL_TIMEOUT, LORA_FIX_LENGTH_PAYLOAD_ON,
                                   0, true, 0, 0, LORA_IQ_INVERSION_ON, true );
    state=TX;
}


String s;
char sV[16];
void loop()
{
    uint16_t voltage = getBatteryVoltage();
    //uint8_t vLevel = BoardGetBatteryLevel();

    #if defined(SH1107Wire_h)
        memset(sV, 0, 16); 
    	sprintf(sV,"(%4dmV)", voltage);
        oled.setColor(BLACK);
        oled.fillRect(64,0,128,10);
        oled.setColor(WHITE);
        oled.drawString(64, 0, sV);
        oled.display();
    #endif

	switch(state)
	{
		case TX:      
            if (bTimeOut)
                turnOnRGB(COLOR_RESEND,0);
            else 
			    turnOnRGB(COLOR_SEND,0);
            delay(1000);

			txNumber++;
		    sprintf(txpacket,"%s:",sID);
		    sprintf(txpacket+strlen(txpacket),"%d",txNumber);
		    sprintf(txpacket+strlen(txpacket),"%s","=");
		    sprintf(txpacket+strlen(txpacket),"%d",Rssi);


		    Serial.printf("\r\nTX:\"%s\" , (%d)\r\n",txpacket, strlen(txpacket));
            #if defined(SH1107Wire_h)
             //oled.clear();
             s="";
             s+=txpacket;
             oled.setColor(BLACK);
             oled.fillRect(0,16,128,10);
             oled.setColor(WHITE);
             oled.drawString(0, 16, s);
             oled.display();
            #endif

		    Radio.Send( (uint8_t *)txpacket, strlen(txpacket) );
		    state=LOWPOWER;
		    break;
		case RX:
            turnOnRGB(COLOR_RECEIVED,0);
			Serial.println("into RX mode");

		    Radio.Rx( 3000 );

		    state=LOWPOWER;
		    break;
 

		case LOWPOWER:
			lowPowerHandler();
		    break;
        default:
            break;
	}
    Radio.IrqProcess( );
}